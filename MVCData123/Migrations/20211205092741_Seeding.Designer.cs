// <auto-generated />
using MVCData123.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVCData123.Migrations
{
    [DbContext(typeof(PersonContext))]
    [Migration("20211205092741_Seeding")]
    partial class Seeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVCData123.Models.PersonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            City = "Örebro",
                            Name = "Adam Bertilson",
                            Phone = "010-1234567"
                        },
                        new
                        {
                            Id = 10002,
                            City = "Ystad",
                            Name = "Caesar Davidsson",
                            Phone = "020-910020"
                        },
                        new
                        {
                            Id = 10003,
                            City = "Ängelholm",
                            Name = "Erijk Filipsson",
                            Phone = "030-65433741"
                        },
                        new
                        {
                            Id = 10005,
                            City = "Halmstad",
                            Name = "Gustav Helgesson",
                            Phone = "040-98765414"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
