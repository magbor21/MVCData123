// <auto-generated />
using System;
using MVCData123.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVCData123.Migrations
{
    [DbContext(typeof(PersonContext))]
    partial class PersonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVCData123.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "2e716005-6437-4829-a0bf-55c35abe0e72",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "425cd9f7-6e7b-4d88-8a08-677b3e860389",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAED8oFCiRxzAYyfnnNpezznwiu47JmQAoCWjNuh+JfTUjx1KefSpb/VgU9NgmrmvNDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5af9aec3-25ad-49bc-80e9-00f27e7ba78c",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "4fc99ff6-d020-4ad1-8f91-3199905f120e",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2001, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "90ea5935-7a14-4cbf-98d7-eca9505333cf",
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            FirstName = "Usher",
                            LastName = "Raymond IV",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "UserNo1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJXSMw5zjoByWmO9mlV26dwe7LQjKftpImLcrPSqwWQXXQ780FhTgEtq8Q1v1R9Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f340da6-b520-4fbc-891e-a19e5f590b3e",
                            TwoFactorEnabled = false,
                            UserName = "UserNo1"
                        });
                });

            modelBuilder.Entity("MVCData123.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentCountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CurrentCountryID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            CurrentCountryID = 10001,
                            Name = "Olso"
                        },
                        new
                        {
                            Id = 10002,
                            CurrentCountryID = 10001,
                            Name = "Bergen"
                        },
                        new
                        {
                            Id = 10003,
                            CurrentCountryID = 10002,
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = 10004,
                            CurrentCountryID = 10003,
                            Name = "Tornio"
                        },
                        new
                        {
                            Id = 10005,
                            CurrentCountryID = 10003,
                            Name = "Turku"
                        },
                        new
                        {
                            Id = 10006,
                            CurrentCountryID = 10004,
                            Name = "Vancouver"
                        },
                        new
                        {
                            Id = 10007,
                            CurrentCountryID = 10005,
                            Name = "Paris"
                        });
                });

            modelBuilder.Entity("MVCData123.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 10002,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 10003,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 10004,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 10005,
                            Name = "France"
                        });
                });

            modelBuilder.Entity("MVCData123.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            Name = "Norwegian"
                        },
                        new
                        {
                            Id = 10002,
                            Name = "Danish"
                        },
                        new
                        {
                            Id = 10003,
                            Name = "Finnish"
                        },
                        new
                        {
                            Id = 10004,
                            Name = "English"
                        },
                        new
                        {
                            Id = 10005,
                            Name = "Swedish"
                        });
                });

            modelBuilder.Entity("MVCData123.Models.PersonLanguage", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PersonLanguages");

                    b.HasData(
                        new
                        {
                            PersonId = 10001,
                            LanguageId = 10001
                        },
                        new
                        {
                            PersonId = 10002,
                            LanguageId = 10001
                        },
                        new
                        {
                            PersonId = 10003,
                            LanguageId = 10001
                        },
                        new
                        {
                            PersonId = 10004,
                            LanguageId = 10001
                        },
                        new
                        {
                            PersonId = 10005,
                            LanguageId = 10001
                        },
                        new
                        {
                            PersonId = 10005,
                            LanguageId = 10002
                        },
                        new
                        {
                            PersonId = 10005,
                            LanguageId = 10003
                        },
                        new
                        {
                            PersonId = 10005,
                            LanguageId = 10004
                        },
                        new
                        {
                            PersonId = 10005,
                            LanguageId = 10005
                        });
                });

            modelBuilder.Entity("MVCData123.Models.PersonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentCityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("CurrentCityID");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            CurrentCityID = 10007,
                            Name = "Adam Bertilson",
                            Phone = "010-1234567"
                        },
                        new
                        {
                            Id = 10002,
                            CurrentCityID = 10006,
                            Name = "Caesar Milan",
                            Phone = "010-123456"
                        },
                        new
                        {
                            Id = 10003,
                            CurrentCityID = 10005,
                            Name = "Adam Buxton",
                            Phone = "010-12345"
                        },
                        new
                        {
                            Id = 10004,
                            CurrentCityID = 10004,
                            Name = "Tom Delonge",
                            Phone = "010-1234"
                        },
                        new
                        {
                            Id = 10006,
                            CurrentCityID = 10003,
                            Name = "Miike Snow",
                            Phone = "010-123"
                        },
                        new
                        {
                            Id = 10007,
                            CurrentCityID = 10002,
                            Name = "Red Forman",
                            Phone = "010-12"
                        },
                        new
                        {
                            Id = 10008,
                            CurrentCityID = 10001,
                            Name = "Nick Frost",
                            Phone = "010-1"
                        },
                        new
                        {
                            Id = 10005,
                            CurrentCityID = 10007,
                            Name = "Adam of Eternia",
                            Phone = "010-123456777"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d27dee38-02b0-499d-8613-fad70f133c62",
                            ConcurrencyStamp = "e4a7b9cc-aac0-4df2-b6ac-4e655d51903b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ef7935be-720d-4aa0-ade1-42baf4bc4431",
                            ConcurrencyStamp = "24f6ce29-1e9f-4210-8f5f-257d7f2771da",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "2e716005-6437-4829-a0bf-55c35abe0e72",
                            RoleId = "d27dee38-02b0-499d-8613-fad70f133c62"
                        },
                        new
                        {
                            UserId = "4fc99ff6-d020-4ad1-8f91-3199905f120e",
                            RoleId = "ef7935be-720d-4aa0-ade1-42baf4bc4431"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MVCData123.Models.City", b =>
                {
                    b.HasOne("MVCData123.Models.Country", "CurrentCountry")
                        .WithMany("Cities")
                        .HasForeignKey("CurrentCountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVCData123.Models.PersonLanguage", b =>
                {
                    b.HasOne("MVCData123.Models.Language", "Language")
                        .WithMany("PersonLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCData123.Models.PersonModel", "Person")
                        .WithMany("PersonLanguages")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVCData123.Models.PersonModel", b =>
                {
                    b.HasOne("MVCData123.Models.City", "CurrentCity")
                        .WithMany("Citizens")
                        .HasForeignKey("CurrentCityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVCData123.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVCData123.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCData123.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVCData123.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
