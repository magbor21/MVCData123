
class PeopleBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = { data: [] };
    }

    loadPeopleFromServer = () => {
        var xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        }.bind(this);
        xhr.send();
    };

    componentDidMount() {
        this.loadPeopleFromServer();
        window.setInterval(this.loadPeopleFromServer, this.props.pollInterval);
    }

    render() {
        return (
            <div className="peopleBox">
                <h1>People</h1>

                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th scope="col"> Name </th>
                            <th scope="col"> City </th>
                            <th scope="col"> Details </th>
                        </tr>
                    </thead>
                                       
                    <PersonList data={this.state.data} />                       
  
                </table>
                

                <PersonForm />
            </div>
        );
    }
}
/*
    handleCommentSubmit = comment => {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({ data: newComments });

        var data = new FormData();
        data.append('author', comment.author);
        data.append('text', comment.text);

        var xhr = new XMLHttpRequest();
        xhr.open('post', this.props.submitUrl, true);
        xhr.onload = function () {
            this.loadCommentsFromServer();
        }.bind(this);
        xhr.send(data); 
    };
    
    componentDidMount() {
        window.setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    }

    render() {
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList data={this.state.data} />
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
        );
    }
}
*/

class PersonList extends React.Component {
    render() {
        const personNodes = this.props.data.map(listPerson => (
            <ListPerson id={listPerson.id} name={listPerson.name} phone={listPerson.phone} cityID={listPerson.cityID} cityName={listPerson.cityName} >
            </ListPerson>
        ));

        return <tbody className="personList">{personNodes}</tbody>;        
    }
}


class PersonForm extends React.Component {
    render() {
        return (
            <div className="personForm">Hello, world! I am a PersonForm.</div>
        );
    }
}

class PersonDetails extends React.Component {
    render() {
        return (
            <div className="personDetails">Hello, world! I am a PersonDetails.</div>
        );
    }

}

class ListPerson extends React.Component {
    
    render() {
        return (
            <tr>
                <td className="name">{this.props.name}</td>
                <td className="cityName">{this.props.cityName}</td>
        
                <td className="Details">
                    <button onClick={this.handleClick}> Details  </button>
                </td>     
            </tr>

        );
    }
}










ReactDOM.render(<PeopleBox url="/listPeople" pollInterval={2000}/>, document.getElementById('content'));